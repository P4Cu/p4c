" vim: nobuflisted foldmethod=marker

let mapleader = "\<space>"

let g:loaded_python_provider = 0

" PLUGINS #######################################################################################{{{
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"Alternative : call vundle#begin('~/some/path/here')
Plugin 'VundleVim/Vundle.vim' " let Vundle manage Vundle, required
Plugin 'morhetz/gruvbox'
Plugin 'benmills/vimux' " running command in tmux
Plugin 'tpope/vim-fugitive' " the ultimate git helper
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode
Plugin 'vim-airline/vim-airline' " status line
Plugin 'ervandew/supertab' " requires some integration with YCM/UltiSnips
" Plugin 'valloric/youcompleteme'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
Plugin 'easymotion/vim-easymotion'
Plugin 'rhysd/vim-clang-format'
Plugin 'kana/vim-operator-user'
Plugin 'tpope/vim-unimpaired'
Plugin 'ryanoasis/vim-devicons'
Plugin 'a.vim'
" TODO: start using this!
Plugin 'dyng/ctrlsf.vim' " requires ack2 already in system !!
" Plugin 'terryma/vim-multiple-cursors'
Plugin 'haya14busa/vim-easyoperator-line'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-repeat' " this is required by easyclip
Plugin 'svermeulen/vim-easyclip'
Plugin 'edkolev/tmuxline.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-dispatch'
Plugin 'lyuts/vim-rtags'
Plugin 'majutsushi/tagbar'
Plugin 'tmux-plugins/vim-tmux-focus-events'
Plugin 'autoswap.vim'
Plugin 'airblade/vim-gitgutter'
" Plugin 'raimondi/delimitmate'
Plugin 'tpope/vim-eunuch'
Plugin 'moll/vim-bbye' " :Db
Plugin 'libclang-vim/libclang-vim'
Plugin 'kana/vim-textobj-user'
Plugin 'libclang-vim/vim-textobj-clang'
Plugin 'kana/vim-textobj-line'
" Plugin 'm42e/vim-gcov-marker'
Plugin 'dzeban/vim-log-syntax'
Plugin 'CharTab' " <leader>ct  character tab
" TODO: decide if it's worth to get rid of dispath.vim
Plugin 'benekastah/neomake'
Plugin 'mechatroner/rainbow_csv'
Plugin 'embear/vim-foldsearch'
Plugin 'terryma/vim-expand-region'
" Plugin 'jrosiek/vim-mark'
Plugin 'dimasg/vim-mark'
Plugin 'davidhalter/jedi-vim'
Plugin 'dhruvasagar/vim-table-mode'
" Open file:line
Plugin 'bogado/file-line'
Plugin 'mhinz/vim-grepper'
Plugin 'yggdroot/leaderf'
Plugin 'liuchengxu/vim-which-key'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" ###############################################################################################}}}


" Generic values ################################################################################{{{
" highlight search
set hlsearch incsearch ignorecase smartcase
" bashlike vim completition + with addition of third tab for list select mode (zsh alike )
set cursorline
set wildmode=longest,list,full
set wildmenu
set mouse=a
set splitright splitbelow
set scrolloff=10 " always show x lines from cursor
set ttyfast " we're fast & local
set undofile " keep history for each file (allows undo after close) file.un~
set gdefault " rly mate, when i wanted to replace only the first occurence in line?
set lazyredraw
" Whitespace
set tabstop=4 shiftwidth=4
set expandtab
set list lcs=trail:·,tab:»·
" Numbering of lines
set numberwidth=5
" use <cor> <con> to enable dispalying
set norelativenumber nonumber
" use <cow>
set nowrap
set updatetime=1000 "this will update tagbar when idle for 1s | also writes swap after 1s
set timeoutlen=500 ttimeoutlen=0
if has('nvim')
"     set inccommand=nosplit " looks like this is causing a redraw issues
endif
set nowrapscan " do not wrap the search!
if has("patch-8.1.0360")
  set diffopt+=internal,algorithm:patience
endif
" ###############################################################################################}}}


" THEME #########################################################################################{{{
let g:gruvbox_italic=1
set termguicolors
colorscheme gruvbox
let airline#extensions#tmuxline#snapshot_file = "~/.tmux/powerline.conf"
" ###############################################################################################}}}


" ##################################################################################################
nnoremap gb :bnext<CR>
nnoremap gB :bprevious<CR>
noremap <C-_> :Commentary<CR>
" tree control
noremap <F1> :YcmCompleter FixIt<CR>
noremap <F3> :BuffergatorToggle<CR>
map <F4> :A<CR>
nmap <F8> :TagbarToggle<CR>
nnoremap <F10> :YcmDiags<CR>
nnoremap <F11> :YcmForceCompileAndDiagnostics<CR>
nnoremap <F12> :YcmToggleLogs<CR>
" youcompleteme mapping
noremap <C-t> :YcmCompleter GoToDeclaration<CR>
noremap <C-g> :YcmCompleter GoTo<CR>
" Easy motion -- we want it back as one Leader not twice
map <Leader> <Plug>(easymotion-prefix)

nnoremap [g :echo "use [c"<CR>
nnoremap ]g :echo "use ]c"<CR>
" nnoremap [g :GitGutterPrevHunk<CR>
" nnoremap ]g :GitGutterNextHunk<CR>
nnoremap cog :GitGutterLineHighlightsToggle<CR>

nnoremap cogg :call P4C_GitGutterDiffHeadToggle()<CR>
" This function toggles diff against HEAD
function! P4C_GitGutterDiffHeadToggle()
    if g:gitgutter_diff_base == ''
        echom 'P4C_GitGutterDiffHeadToggle diff against HEAD'
        let g:gitgutter_diff_base = 'HEAD'
    else
        echom 'P4C_GitGutterDiffHeadToggle diff against INDEX'
        let g:gitgutter_diff_base = ''
    endif
    execute 'silent GitGutter'
endfunction
" ##################################################################################################

" ##################################################################################################
" vim-ariline
set laststatus=2
set noshowmode
" hi StatusLine 
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#show_splits = 0
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>[ <Plug>AirlineSelectPrevTab
nmap <leader>] <Plug>AirlineSelectNextTab
" ##################################################################################################


" ##################################################################################################
" Buffergator
set hidden
let g:buffergator_suppress_keymaps=1
let g:buffergator_split_size = 100
let g:buffergator_sort_regime = "basename"
let g:buffergator_show_full_directory_path = 0
" map <Leader>[ :BuffergatorMruCyclePrev<CR>
" map <Leader>] :BuffergatorMruCycleNext<CR>
" ##################################################################################################

" ##################################################################################################
" MISC
set colorcolumn=101
" ##################################################################################################

" ##################################################################################################
" GVim deditacted settings
set guioptions-=T " no toolbar!
" ##################################################################################################

" ##################################################################################################
" Project specific
" ##################################################################################################
if filereadable(glob("~/.vimrc_custom"))
    source ~/.vimrc_custom
endif
" ##################################################################################################

" Vim session
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_command_aliases = 1

" vim-devicons
set guifont=DroidSansMonoForPowerline\ Nerd\ Font\ 11
let g:airline_powerline_fonts=1

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" bug with UltiSnips+YCM+SuperTab
let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

" CtrlSF
nmap     <leader>sf <Plug>CtrlSFPrompt
nmap     <leader>ss <Plug>CtrlSFStop
vmap     <leader>sf <Plug>CtrlSFVwordPath
vmap     <leader>sF <Plug>CtrlSFVwordExec
nmap     <leader>sn <Plug>CtrlSFCwordPath
nmap     <leader>sp <Plug>CtrlSFPwordPath
nnoremap <leader>so :CtrlSFOpen<CR>
nnoremap <leader>st :CtrlSFToggle<CR>
inoremap <leader>st <Esc>:CtrlSFToggle<CR>

" Multiple-Cursors
let g:multi_cursor_quit_key='<C-c>'

" EasyClip options
" let g:EasyClipUseSubstituteDefaults=1 " disable as it's annoying
let g:EasyClipAlwaysMoveCursorToEndOfPaste=1
set clipboard=unnamedplus
let g:EasyClipShareYanks=1
let g:EasyClipShowYanksWidth=1
" nmap ]y <plug>EasyClipSwapPasteForward
" nmap [y <plug>EasyClipSwapPasteBackwards
nmap <c-n> <Plug>EasyClipSwapPasteBackwards
nmap <c-b> <Plug>EasyClipSwapPasteForward

" No backup files
" set nobackup

" No write backup
" set nowritebackup

" No swap file
" set noswapfile

" This will automatically read changed file. It will ask if we have unsaved
" changes.
set autoread

let g:textobj_clang_more_mappings=1

" always use buffer delete map
" cmap bd Bd
cabbrev bd <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Bd' : 'bd')<CR>

let g:tagbar_width = 80
let g:tagbar_autofocus = 1

" working with filepaths/numbers
nnoremap cp :let @+ = expand("%:p")<cr><bar>:echo "Copied full file path"<cr>
nnoremap cpl :let @+ = expand("%:p") . ":" . line(".")<cr><bar>:echo "Copied full file path with line number"<cr>

if has('nvim')
    tnoremap <Esc> <C-\><C-n>
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l
endif

let g:PyFlakeCheckers = 'pep8'
let g:autoswap_detect_tmux = 1

" Do not jump on pressing star
" noremap <silent> * :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" missing toggle paste
nmap cop :setlocal <C-R>=<SNR>61_toggle("paste")<CR><CR>

" rtags configuration
let g:rtagsMinCharsForCommandCompletion=2

" a.vim settings
let g:alternateNoDefaultAlternate = 1

" thats the default
let g:alternateSearchPath = 'sfr:../source,sfr:../src,sfr:../include,sfr:../inc'
let g:alternateSearchPath .= ',sfr:../../include,sfr:../../inc'
let g:alternateSearchPath .= ',sfr:../../source,sfr:../../src'
let g:alternateSearchPath .= ',reg:/include/src/g/'
let g:alternateSearchPath .= ',reg:/src/include/g/'
"            EXAMPLE: 'reg:/inc/src/g/' will replace every instance 
"            of 'inc' with 'src' in the source file path. It is possible
"            to use match variables so you could do something like:
"            'reg:|src/\([^/]*\)|inc/\1||' (see 'help :substitute', 
"            'help pattern' and 'help sub-replace-special' for more details
" https://superuser.com/questions/313064/switching-between-src-and-include-files-in-vim/313113#313113
" let g:alternateSearchPath = 'reg:#\<src\>$#include#,reg:#\<include\>$#src#'

let g:gitgutter_terminal_reports_focus = 0 " or autocmd BufReadPost * :GitGutterAll

let g:EasyClipEnableBlackHoleRedirect = 0 " no black hole

let g:grepper = {}
let g:grepper.tools = ['rg', 'ag', 'ack', 'ack-grep', 'grep', 'findstr', 'pt', 'sift']
nmap gs  <plug>(GrepperOperator)
vmap gs  <plug>(GrepperOperator)


nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
" nnoremap <silent> g :WhichKey 'g'<CR>
" nnoremap <silent> y :WhichKey 'y'<CR>
nnoremap <silent> [ :WhichKey '['<CR>
nnoremap <silent> ] :WhichKey ']'<CR>

nnoremap <C-p> :echo "use \<leader\>ff"<CR>
let g:Lf_ShortcutF = "<leader>ff"
let g:Lf_ShortcutB = ""
nnoremap <silent> <leader>fb :LeaderfBufferAll<CR>
nnoremap <silent> <leader>fm :LeaderfMru<CR>
nnoremap <silent> <leader>ft :LeaderfTag<CR> " TODO: or BufTag/BufTagAll ?
nnoremap <silent> <leader>fd :LeaderfFunction<CR>
nnoremap <silent> <leader>fD :LeaderfFunctionAll<CR>
nnoremap <silent> <leader>f/ :LeaderfLine<CR>
nnoremap <silent> <leader>f? :LeaderfLineAll<CR>
nnoremap <silent> <leader>fc :LeaderfCommand<CR>
